{
  "id": "wt-1747632773047yPBc7GG6He9Z_uSN-U1u0",
  "type": "tool",
  "name": "make_move",
  "description": "Make a move on the board.",
  "tags": [],
  "requirements": [],
  "createdAt": "2024-09-27T16:01:14.292Z",
  "updatedAt": "2025-05-19T06:13:50.936Z",
  "data": {
    "content": "# filename: {make_move}.py\n\"\"\"Replace this with your code.\n\nmake sure a function with the same name\nas the tool is defined in the code.\n\"\"\"\n# pylint: disable=global-statement,unused-import\nfrom typing import Annotated\n\nimport chess\n\n\ndef make_move(\n    move: Annotated[str, \"A move in UCI format.\"],\n) -> Annotated[str, \"Result of the move.\"]:\n    \"\"\"Make a move on the board.\"\"\"\n    # pylint: disable=global-statement\n    global MADE_MOVE\n    try:\n        chess_move = chess.Move.from_uci(move)\n    except BaseException:  # pylint: disable=broad-exception-caught\n        chess_move = BOARD.parse_san(move)\n    BOARD.push_uci(str(move))\n    # Get the piece name.\n    piece = BOARD.piece_at(chess_move.to_square)\n    if piece is None:\n        return \"Invalid move.\"\n    piece_symbol = piece.unicode_symbol()\n    piece_name = (\n        chess.piece_name(piece.piece_type).capitalize()\n        if piece_symbol.isupper()\n        else chess.piece_name(piece.piece_type)\n    )\n    MADE_MOVE = True  # pyright: ignore\n    return f\"Moved {piece_name} ({piece_symbol}) from \"\\\n        f\"{chess.SQUARE_NAMES[chess_move.from_square]} to \"\\\n        f\"{chess.SQUARE_NAMES[chess_move.to_square]}.\"",
    "toolType": "custom",
    "secrets": {}
  },
  "position": {
    "x": 400,
    "y": 10
  },
  "measured": {
    "width": 180,
    "height": 100
  },
  "selected": true,
  "hidden": false,
  "className": ""
}